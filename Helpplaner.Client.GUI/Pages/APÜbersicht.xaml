<Page x:Class="Helpplaner.Client.GUI.Pages.APÜbersicht"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:Helpplaner.Client.GUI.Pages"
       xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
      mc:Ignorable="d" 
      d:DesignHeight="450" d:DesignWidth="700"
      Title="APÜbersicht"
      d:DataContext=" "
      

    >

    <Page.Resources>
        <ResourceDictionary>

            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="..\Themes\DarkMode.xaml"/>


                <!-- You can include a default theme here -->
            </ResourceDictionary.MergedDictionaries>

            <Style TargetType="TextBox" x:Key="WatermarkTextBoxStyle">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TextBox">
                            <Grid>
                                <!-- TextBox -->
                                <TextBox Text="{TemplateBinding Text}" 
                           BorderThickness="{TemplateBinding BorderThickness}"
                           BorderBrush="{TemplateBinding BorderBrush}" />
                                <!-- Watermark TextBlock -->
                                <TextBlock Text="Enter text here..." 
                             Foreground="Gray" 
                             Margin="5,0,0,0"
                             VerticalAlignment="Center"
                             Visibility="Collapsed">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Style.Triggers>
                                                <!-- Show Watermark when TextBox is empty -->
                                                <DataTrigger Binding="{Binding Text.Length, RelativeSource={RelativeSource TemplatedParent}}" Value="0">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                                <!-- Hide Watermark when TextBox has text -->
                                                <DataTrigger Binding="{Binding Text.Length, RelativeSource={RelativeSource TemplatedParent}}" Value="0">
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="Button" >

            </Style>
            <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
            <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
            <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
            <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
            <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
            <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
            <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
            <ControlTemplate x:Key="RoundetButton" TargetType="{x:Type ButtonBase}">
                <Border x:Name="border" CornerRadius="10" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                    <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="Button.IsDefaulted" Value="true">
                        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="TextBlock.Foreground" TargetName="contentPresenter" Value="{DynamicResource BackgroundColorTextHighlight}"></Setter>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="true">
                        <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                        <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                        <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <Style x:Key="textboxSearch" TargetType="TextBox">
                <Setter Property="Background" Value="White"/>
                <Setter Property="Foreground" Value="#b0b0c6"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="FontSize" Value="10"/>
                <Setter Property="Padding" Value="10,7"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Margin" Value="0,10"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="TextBoxBase">
                            <Border x:Name="border" CornerRadius="15"
                        Background="{TemplateBinding Background}"
                        SnapsToDevicePixels="True" BorderThickness="1"
                        BorderBrush="#e0e6ed">
                                <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Hidden"
                                  VerticalScrollBarVisibility="Hidden"/>
                            </Border>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" Value="#d9d9d9" TargetName="border"/>
                                </Trigger>

                                <Trigger Property="IsKeyboardFocused" Value="True">
                                    <Setter Property="BorderBrush" Value="#d9d9d9" TargetName="border"/>
                                </Trigger>
                            </ControlTemplate.Triggers>

                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="addButton" TargetType="Button">
                <Setter Property="Background" Value="{DynamicResource BackgroundColorTextHighlight}"/>
                <Setter Property="Foreground" Value="{DynamicResource ColorText}"/>
                <Setter Property="Width" Value="160"/>
                <Setter Property="Height" Value="35"/>
                <Setter Property="FontSize" Value="13"/>
                <Setter Property="Margin" Value="0 10 0 0"/>
                <Setter Property="Grid.Row" Value="2"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border CornerRadius="7"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
      
    </Page.Resources>

    
    <Grid>
        
        <Grid.ColumnDefinitions>
           
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <Grid Grid.Column="1"  Background="{DynamicResource BackgroundColorMain}">
            <Grid.RowDefinitions>
                <RowDefinition Height="10*"/>
                <RowDefinition Height="80*"/>
                <RowDefinition Height="20*"/>

            </Grid.RowDefinitions>

         


            <!--Page Title-->
            
            <TextBlock Text="Arbeitspakete" Grid.Row="0" FontSize="20" FontWeight="SemiBold"
                       Margin="20,15,0,0" HorizontalAlignment="Left" Foreground="{DynamicResource ColorText}"/>
            <Grid HorizontalAlignment="Right" Width="310px" Height="25" Margin="0,0,20,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="100px"/>
                    <ColumnDefinition Width="200px"/>
                </Grid.ColumnDefinitions>
                <ComboBox Grid.Column="0" x:Name="SearchCategory" Background="{DynamicResource BackgroundColorSecondary}" BorderBrush="{DynamicResource ColorText}" Margin="0,0,10,0" materialDesign:HintAssist.Hint=" Kategorie" SelectedValuePath="Content">
                    <ComboBoxItem Content="ID"></ComboBoxItem>
                    <ComboBoxItem Content="Name"></ComboBoxItem>
                    <ComboBoxItem Content="Beschreibung"></ComboBoxItem>
                    <ComboBoxItem Content="Zuständiger"></ComboBoxItem> 
                    
                </ComboBox>
                <TextBox Grid.Column="1" x:Name="SearchBox" Background="{DynamicResource BackgroundColorSecondary}" Foreground="{DynamicResource ColorText}"  materialDesign:HintAssist.Hint=" Suchen..." TextChanged="TextBox_TextChanged"></TextBox>
            </Grid>
            
            
            <!-- Add Button-->
           

            
           
            
            <!-- Datagrid-->

            <DataGrid  x:Name="AP" Grid.Row="1" Background="{DynamicResource BackgroundColorMain}" AutoGenerateColumns="False"  ItemsSource="{Binding Tasks }" IsEnabled="True" Margin="20,10,20,0" SelectedCellsChanged="AP_SelectedCellsChanged" MouseDoubleClick="AP_MouseDoubleClick">
              
                
                <DataGrid.Resources>
                    <Style BasedOn="{StaticResource {x:Type DataGridColumnHeader}}" TargetType="{x:Type DataGridColumnHeader}">
                        <Setter Property="Background" Value="{DynamicResource BackgroundColorSecondary}" />
                        <Setter Property="Foreground" Value="{DynamicResource ColorText}" />
                        <Setter Property="BorderThickness" Value="0"/>
                    </Style>
                </DataGrid.Resources>
                <DataGrid.CellStyle>
                    <Style TargetType="DataGridCell">
                        <Setter Property="Foreground" Value="{DynamicResource ColorText}"/>
                    </Style>
                    
                    

                </DataGrid.CellStyle>
          
                    <DataGrid.Columns >


                    <DataGridTextColumn Header="ID" Binding="{Binding IdInProject}" Width="1*" IsReadOnly="True" />
                    <DataGridTextColumn Header="Name" Binding="{Binding Name}" Width="2*" IsReadOnly="True"/>
                  
                 
                    <DataGridTextColumn Header="Zuständiger" Binding="{Binding ReponsibleName}" Width="2*" IsReadOnly="True" />
                    <DataGridTextColumn Header="Beschreibung" Binding="{Binding Description}" Width="4*" IsReadOnly="True" >
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                                <Setter Property="ToolTip" Value="{Binding Text, 
                              RelativeSource={RelativeSource Self}}"/>

                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Header="Status" Binding="{Binding Status}" IsReadOnly="True" Width="1*" >
                        <DataGridTextColumn.CellStyle>
                            <Style TargetType="DataGridCell">
                                <Setter Property="Foreground" Value="{Binding colorStatus}" />
                              
                                <Setter Property="Background" Value="{Binding colorStatus}" />
                              
                            </Style>
                        </DataGridTextColumn.CellStyle>
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
                                <Setter Property="ToolTip" Value="{Binding Text, 
RelativeSource={RelativeSource Self}}"/>

                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                </DataGrid.Columns>

            </DataGrid>
            <StackPanel Orientation="Horizontal" Grid.Row="2">
                <Button  x:Name="PopupButton"  Template="{StaticResource RoundetButton}" Foreground="#B0BEC5" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Center" Grid.Row="2" Width="35" Height="35"  FontSize="20"  Background="{DynamicResource BackgroundColorTextHighlight}" HorizontalAlignment="Right" Margin="10,15,15,0" Click="PopupButton_Click" ></Button>
                <Button Template="{StaticResource RoundetButton}" Foreground="#B0BEC5" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Center" Grid.Row="2" Width="35" Height="35" Content="+" FontSize="20"  Background="{DynamicResource BackgroundColorTextHighlight}" HorizontalAlignment="Right" Margin="10,15,20,0" Click="Button_Click" ></Button>
                <Button Template="{StaticResource RoundetButton}" Foreground="#B0BEC5" VerticalContentAlignment="Stretch" HorizontalContentAlignment="Center" Grid.Row="2" Width="35" Height="35" Content="-" FontSize="20" Background="{DynamicResource BackgroundColorTextHighlight}" HorizontalAlignment="Right" Margin="0,15,60,0" Click="Button_Click_1" ></Button>

                <Label x:Name="Waring" Foreground="Red"></Label>
            </StackPanel>
           
            <!-- Pagination Section-->



        </Grid>


        

    </Grid>
</Page>
